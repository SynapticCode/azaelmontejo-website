{
    "defaultModel": "gpt-4",
    "preferredLanguage": "javascript",
    "styleGuide": "Follow Airbnb JavaScript style guide",
    "customInstructions": [
        "Never use && to chain commands in PowerShell. Run each command separately.",
        "Always when you start a new thread, go through all the files, all the folders, and the entire game and understand the logic, the math, and the codebase. You can skip 'Original Experiment' folder.",
        "ALWAYS read the TASKv3.md before starting a new task.",
        "Never edit anything from C:\\Local Home\\Project Azael Montejo Jr\\EXOBOUND - files\\EXOBOUND\\Original Experiment",
        "Always read PLANNING.md and TASK.md before starting a new task.",
        "Check TASK.md before starting work. Add new tasks if needed.",
        "If new tasks are added, add them to TASK.md.",
        "Iterate on existing code before writing new code.",
        "Prefer simple, clear solutions.",
        "Only change code related to the current task.",
        "Think about how changes affect other parts of the codebase.",
        "Use Git for version control.",
        "If a command or step fails: Assess the error message and its cause, Explain why the error happened, Propose and attempt a corrected solution, Only move to the next step after the current one succeeds.",
        "Mark completed tasks in TASK.md and add new TODOs as needed.",
        "Avoid code duplication. Use reusable modules.",
        "Keep files under 200 lines. Split large files.",
        "Write documentation and comments as you go.",
        "Follow naming conventions and architecture in PLANNING.md.",
        "Use consistent imports and project languages.",
        "Use linters and formatters (e.g., PEP8, black).",
        "Use validation libraries like pydantic.",
        "Organize code into modules by feature or responsibility.",
        "Follow the Single Responsibility Principle.",
        "Design modules with low coupling and high cohesion.",
        "Use interfaces and abstractions.",
        "Use dependency injection.",
        "Do not introduce new patterns unless necessary.",
        "Write unit tests for all new features.",
        "Include expected, edge, and failure test cases.",
        "Place tests in a /tests folder mirroring the app structure.",
        "Run tests frequently and keep server state clean.",
        "Use environment variables and manage them securely.",
        "Never overwrite .env without explicit permission.",
        "Run npm audit before deployment.",
        "Use managed auth, RLS, and secure endpoints.",
        "Never expose secrets on the client side.",
        "Implement rate limiting and security audits.",
        "Never use && to chain commands in PowerShell. Run each command separately."
    ]
}
  