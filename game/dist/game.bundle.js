(()=>{"use strict";var __webpack_modules__={296:()=>{eval("\n;// ./src/scenes/TitleScene.js\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nfunction _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\nvar TitleScene = /*#__PURE__*/function (_Phaser$Scene) {\n  function TitleScene() {\n    _classCallCheck(this, TitleScene);\n    return _callSuper(this, TitleScene, [{\n      key: 'TitleScene'\n    }]);\n  }\n  _inherits(TitleScene, _Phaser$Scene);\n  return _createClass(TitleScene, [{\n    key: \"preload\",\n    value: function preload() {\n      // Create placeholder graphics for now\n      this.load.image('logo', 'https://phaser.io/images/logo.png');\n    }\n  }, {\n    key: \"create\",\n    value: function create() {\n      var _this = this;\n      // Add a logo\n      this.add.image(400, 150, 'logo').setScale(0.5);\n\n      // Add title text\n      this.add.text(400, 250, 'Attentional Horizons', {\n        fontSize: '48px',\n        color: '#ffffff'\n      }).setOrigin(0.5);\n\n      // Consent Text\n      var consentText = 'Welcome! We are so glad you are here to collaborate on this special project from the Velez Lab at Princeton University. To support this study, we collect gameplay data that is always kept completely anonymous. Your personal information will never be part of our data; that is our firm commitment to you. For any questions at all about this research, please do not hesitate to contact me at azael.montejo.jr@rutgers.edu.';\n      this.add.text(400, 350, consentText, {\n        fontSize: '16px',\n        color: '#dddddd',\n        align: 'center',\n        wordWrap: {\n          width: 700\n        }\n      }).setOrigin(0.5);\n\n      // Create checkbox graphics\n      this.add.rectangle(150, 450, 24, 24, 0xffffff).setStrokeStyle(2, 0x000000);\n      var checkmark = this.add.text(150, 450, 'âœ“', {\n        fontSize: '20px',\n        color: '#000000'\n      }).setOrigin(0.5);\n      checkmark.setVisible(false);\n\n      // Checkbox container for interaction\n      var checkbox = this.add.rectangle(150, 450, 40, 40, 0x000000, 0).setInteractive().on('pointerdown', function () {\n        _this.agreed = !_this.agreed;\n        checkmark.setVisible(_this.agreed);\n        desktopButton.setAlpha(_this.agreed ? 1 : 0.5);\n        mobileButton.setAlpha(_this.agreed ? 1 : 0.5);\n      });\n\n      // Agreement text\n      this.add.text(170, 450, 'I agree and wish to enter', {\n        fontSize: '20px',\n        color: '#ffffff'\n      }).setOrigin(0, 0.5);\n\n      // Desktop Button\n      var desktopButton = this.add.rectangle(250, 520, 200, 50, 0x4a6fa5).setInteractive().on('pointerdown', function () {\n        if (_this.agreed) {\n          _this.scene.start('GameScene', {\n            isMobile: false\n          });\n        }\n      });\n      this.add.text(250, 520, 'Play on Desktop', {\n        fontSize: '24px',\n        color: '#ffffff'\n      }).setOrigin(0.5);\n      desktopButton.setAlpha(0.5);\n\n      // Mobile Button\n      var mobileButton = this.add.rectangle(550, 520, 200, 50, 0x4a6fa5).setInteractive().on('pointerdown', function () {\n        if (_this.agreed) {\n          _this.scene.start('GameScene', {\n            isMobile: true\n          });\n        }\n      });\n      this.add.text(550, 520, 'Play on Mobile', {\n        fontSize: '24px',\n        color: '#ffffff'\n      }).setOrigin(0.5);\n      mobileButton.setAlpha(0.5);\n\n      // Initialize agreed state\n      this.agreed = false;\n    }\n  }]);\n}(Phaser.Scene);\n;// ./src/scenes/GameScene.js\nfunction GameScene_typeof(o) { \"@babel/helpers - typeof\"; return GameScene_typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, GameScene_typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = GameScene_toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction GameScene_classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction GameScene_defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, GameScene_toPropertyKey(o.key), o); } }\nfunction GameScene_createClass(e, r, t) { return r && GameScene_defineProperties(e.prototype, r), t && GameScene_defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction GameScene_toPropertyKey(t) { var i = GameScene_toPrimitive(t, \"string\"); return \"symbol\" == GameScene_typeof(i) ? i : i + \"\"; }\nfunction GameScene_toPrimitive(t, r) { if (\"object\" != GameScene_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != GameScene_typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction GameScene_callSuper(t, o, e) { return o = GameScene_getPrototypeOf(o), GameScene_possibleConstructorReturn(t, GameScene_isNativeReflectConstruct() ? Reflect.construct(o, e || [], GameScene_getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction GameScene_possibleConstructorReturn(t, e) { if (e && (\"object\" == GameScene_typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return GameScene_assertThisInitialized(t); }\nfunction GameScene_assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction GameScene_isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (GameScene_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction GameScene_getPrototypeOf(t) { return GameScene_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, GameScene_getPrototypeOf(t); }\nfunction GameScene_inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && GameScene_setPrototypeOf(t, e); }\nfunction GameScene_setPrototypeOf(t, e) { return GameScene_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, GameScene_setPrototypeOf(t, e); }\nvar GameScene = /*#__PURE__*/function (_Phaser$Scene) {\n  function GameScene() {\n    GameScene_classCallCheck(this, GameScene);\n    return GameScene_callSuper(this, GameScene, [{\n      key: 'GameScene'\n    }]);\n  }\n  GameScene_inherits(GameScene, _Phaser$Scene);\n  return GameScene_createClass(GameScene, [{\n    key: \"init\",\n    value: function init(data) {\n      // Receive the isMobile flag from the TitleScene\n      this.isMobile = data.isMobile;\n\n      // Initialize game data\n      this.gameData = [];\n      this.score = 0;\n\n      // Game duration in seconds (5 minutes)\n      this.gameDuration = 300;\n    }\n  }, {\n    key: \"preload\",\n    value: function preload() {\n      // Create placeholder graphics for now\n      this.load.image('player', 'https://labs.phaser.io/assets/sprites/mushroom2.png');\n      this.load.image('npc_operations', 'https://labs.phaser.io/assets/sprites/bluemushroom.png');\n      this.load.image('npc_rnd', 'https://labs.phaser.io/assets/sprites/phaser-dude.png');\n\n      // Load the rexUI plugin for dialogs if on mobile\n      if (this.isMobile) {\n        this.load.plugin('rexvirtualjoystickplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexvirtualjoystickplugin.min.js', true);\n      }\n\n      // Load the rexUI plugin for dialogs\n      this.load.scenePlugin('rexuiplugin', 'https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexuiplugin.min.js', 'rexUI', 'rexUI');\n    }\n  }, {\n    key: \"create\",\n    value: function create() {\n      // Create a simple background\n      this.add.rectangle(400, 300, 800, 600, 0x333333);\n\n      // Create a simple \"office\" layout with rectangles\n      this.add.rectangle(200, 200, 300, 200, 0x666666); // \"Operations\" area\n      this.add.rectangle(600, 200, 300, 200, 0x666666); // \"R&D\" area\n\n      // Add area labels\n      this.add.text(200, 200, 'Operations', {\n        fontSize: '24px',\n        color: '#ffffff'\n      }).setOrigin(0.5);\n      this.add.text(600, 200, 'R&D', {\n        fontSize: '24px',\n        color: '#ffffff'\n      }).setOrigin(0.5);\n\n      // Create the player\n      this.player = this.physics.add.sprite(400, 300, 'player');\n      this.player.setCollideWorldBounds(true);\n\n      // Create NPCs\n      this.npcOperations = this.physics.add.sprite(200, 200, 'npc_operations');\n      this.npcRnD = this.physics.add.sprite(600, 200, 'npc_rnd');\n\n      // Create interaction zones around NPCs\n      this.interactionZones = this.physics.add.group({\n        classType: Phaser.GameObjects.Zone\n      });\n      var opsZone = this.interactionZones.create(200, 200, 100, 100);\n      opsZone.name = 'Operations';\n      var rndZone = this.interactionZones.create(600, 200, 100, 100);\n      rndZone.name = 'RnD';\n\n      // Set up overlap detection\n      this.physics.add.overlap(this.player, this.interactionZones, this.onZoneOverlap, null, this);\n\n      // Set up controls\n      this.setupControls();\n\n      // Set up UI\n      this.setupUI();\n\n      // Start the game timer\n      this.gameTimer = this.time.addEvent({\n        delay: 1000,\n        callback: this.updateTimer,\n        callbackScope: this,\n        loop: true\n      });\n\n      // Log game start\n      this.logEvent('game_start', {\n        device_type: this.isMobile ? 'mobile' : 'desktop'\n      });\n    }\n  }, {\n    key: \"setupControls\",\n    value: function setupControls() {\n      var _this = this;\n      if (this.isMobile) {\n        // Mobile controls using virtual joystick\n        if (this.rexVirtualJoystick) {\n          this.joyStick = this.rexVirtualJoystick.add(this, {\n            x: 100,\n            y: 500,\n            radius: 50,\n            base: this.add.circle(0, 0, 50, 0x888888, 0.5),\n            thumb: this.add.circle(0, 0, 25, 0xcccccc, 0.7)\n          }).setScrollFactor(0);\n        }\n\n        // Add interaction button for mobile\n        this.interactButton = this.add.circle(700, 500, 40, 0x4a6fa5, 0.7).setScrollFactor(0).setInteractive().on('pointerdown', function () {\n          _this.checkInteraction();\n        });\n        this.add.text(700, 500, 'E', {\n          fontSize: '32px',\n          color: '#ffffff'\n        }).setOrigin(0.5).setScrollFactor(0);\n      } else {\n        // Desktop controls\n        this.cursors = this.input.keyboard.createCursorKeys();\n        this.interactKey = this.input.keyboard.addKey('E');\n\n        // Add key prompt\n        this.add.text(400, 550, 'Press E to interact when near an NPC', {\n          fontSize: '18px',\n          color: '#ffffff'\n        }).setOrigin(0.5).setScrollFactor(0);\n      }\n    }\n  }, {\n    key: \"setupUI\",\n    value: function setupUI() {\n      // Score display\n      this.scoreText = this.add.text(16, 16, 'Score: 0', {\n        fontSize: '24px',\n        color: '#ffffff',\n        backgroundColor: '#000000'\n      }).setScrollFactor(0);\n\n      // Timer display\n      this.timerText = this.add.text(16, 50, \"Time: \".concat(this.gameDuration), {\n        fontSize: '24px',\n        color: '#ffffff',\n        backgroundColor: '#000000'\n      }).setScrollFactor(0);\n    }\n  }, {\n    key: \"updateTimer\",\n    value: function updateTimer() {\n      this.gameDuration--;\n      this.timerText.setText(\"Time: \".concat(this.gameDuration));\n      if (this.gameDuration <= 0) {\n        this.endGame();\n      }\n    }\n  }, {\n    key: \"deductTime\",\n    value: function deductTime(seconds) {\n      this.gameDuration -= seconds;\n      if (this.gameDuration < 0) this.gameDuration = 0;\n      this.timerText.setText(\"Time: \".concat(this.gameDuration));\n    }\n  }, {\n    key: \"endGame\",\n    value: function endGame() {\n      this.gameTimer.remove();\n\n      // Log game end\n      this.logEvent('game_end', {\n        final_score: this.score\n      });\n\n      // Transition to EndScene\n      this.scene.start('EndScene', {\n        score: this.score,\n        gameData: this.gameData\n      });\n    }\n  }, {\n    key: \"onZoneOverlap\",\n    value: function onZoneOverlap(player, zone) {\n      // Visual indicator that interaction is possible\n      if (!this.interactionIndicator) {\n        this.interactionIndicator = this.add.text(player.x, player.y - 40, 'Press E', {\n          fontSize: '16px',\n          color: '#ffffff',\n          backgroundColor: '#000000'\n        }).setOrigin(0.5);\n      } else {\n        this.interactionIndicator.setPosition(player.x, player.y - 40);\n        this.interactionIndicator.setVisible(true);\n      }\n\n      // Check for interaction key press\n      if (this.interactKey && Phaser.Input.Keyboard.JustDown(this.interactKey)) {\n        this.initiateInteraction(zone.name);\n      }\n    }\n  }, {\n    key: \"checkInteraction\",\n    value: function checkInteraction() {\n      var _this2 = this;\n      // For mobile button press\n      var closestZone = null;\n      var minDistance = 100; // Maximum interaction distance\n\n      this.interactionZones.getChildren().forEach(function (zone) {\n        var distance = Phaser.Math.Distance.Between(_this2.player.x, _this2.player.y, zone.x, zone.y);\n        if (distance < minDistance) {\n          minDistance = distance;\n          closestZone = zone;\n        }\n      });\n      if (closestZone) {\n        this.initiateInteraction(closestZone.name);\n      }\n    }\n  }, {\n    key: \"initiateInteraction\",\n    value: function initiateInteraction(zoneName) {\n      if (zoneName === 'Operations') {\n        this.createDialogue('Operations', 'A new shipment has arrived. How should we process it?', {\n          text: 'Follow SOP',\n          type: 'exploitation'\n        }, {\n          text: 'Try New Algorithm',\n          type: 'exploration'\n        });\n      } else if (zoneName === 'RnD') {\n        this.createDialogue('R&D', 'We have a prototype idea. Should we pursue it?', {\n          text: 'Refine Existing Tech',\n          type: 'exploitation'\n        }, {\n          text: 'Develop Blue-Sky Project',\n          type: 'exploration'\n        });\n      }\n    }\n  }, {\n    key: \"createDialogue\",\n    value: function createDialogue(npcId, text, choiceA, choiceB) {\n      var _this3 = this;\n      // Prevent creating multiple dialogues\n      if (this.dialog) {\n        return;\n      }\n\n      // Create dialog using rexUI\n      var dialogConfig = {\n        x: 400,\n        y: 300,\n        width: 500,\n        background: this.rexUI.add.roundRectangle(0, 0, 100, 100, 20, 0x1565c0),\n        title: this.rexUI.add.label({\n          background: this.rexUI.add.roundRectangle(0, 0, 100, 40, 20, 0x003c8f),\n          text: this.add.text(0, 0, npcId, {\n            fontSize: '24px'\n          }),\n          space: {\n            left: 15,\n            right: 15,\n            top: 10,\n            bottom: 10\n          }\n        }),\n        content: this.add.text(0, 0, text, {\n          fontSize: '20px',\n          wordWrap: {\n            width: 480\n          },\n          align: 'center'\n        }),\n        actions: [this.createButton(choiceA.text), this.createButton(choiceB.text)],\n        space: {\n          title: 25,\n          content: 25,\n          action: 15,\n          left: 20,\n          right: 20,\n          top: 20,\n          bottom: 20\n        },\n        align: {\n          actions: 'center'\n        },\n        expand: {\n          content: false\n        }\n      };\n      this.dialog = this.rexUI.add.dialog(dialogConfig).layout().popUp(500);\n      this.dialog.on('button.click', function (button, groupName, index) {\n        var choice = index === 0 ? choiceA : choiceB;\n        _this3.handlePlayerChoice(npcId, choice);\n        _this3.dialog.scaleDownDestroy(100);\n        _this3.dialog = null;\n      }).on('button.over', function (button, groupName, index) {\n        button.getElement('background').setStrokeStyle(1, 0xffffff);\n      }).on('button.out', function (button, groupName, index) {\n        button.getElement('background').setStrokeStyle();\n      });\n    }\n  }, {\n    key: \"createButton\",\n    value: function createButton(text) {\n      return this.rexUI.add.label({\n        background: this.rexUI.add.roundRectangle(0, 0, 0, 0, 10, 0x003c8f),\n        text: this.add.text(0, 0, text, {\n          fontSize: '20px'\n        }),\n        space: {\n          left: 10,\n          right: 10,\n          top: 10,\n          bottom: 10\n        }\n      });\n    }\n  }, {\n    key: \"handlePlayerChoice\",\n    value: function handlePlayerChoice(npcId, choice) {\n      var timeCost = 15; // All interactions cost 15 seconds\n      this.deductTime(timeCost);\n      var outcome = {};\n      if (choice.type === 'exploitation') {\n        outcome = {\n          score: 10,\n          success: true\n        }; // Predictable outcome\n      } else {\n        // exploration\n        if (Math.random() > 0.5) {\n          outcome = {\n            score: 30,\n            success: true\n          }; // High reward\n        } else {\n          outcome = {\n            score: 0,\n            success: false\n          }; // Failure\n        }\n      }\n      this.score = (this.score || 0) + outcome.score;\n      this.scoreText.setText(\"Score: \".concat(this.score));\n\n      // Show outcome feedback\n      var feedbackText = outcome.success ? \"Success! +\".concat(outcome.score, \" points\") : 'Attempt failed. No points gained.';\n      var feedback = this.add.text(400, 400, feedbackText, {\n        fontSize: '24px',\n        color: outcome.success ? '#00ff00' : '#ff0000',\n        backgroundColor: '#000000'\n      }).setOrigin(0.5);\n      this.time.delayedCall(2000, function () {\n        feedback.destroy();\n      });\n\n      // Log this event\n      this.logEvent('interaction', {\n        npc: npcId,\n        choice: choice.type,\n        outcome_score: outcome.score,\n        outcome_success: outcome.success,\n        time_cost: timeCost\n      });\n    }\n  }, {\n    key: \"logEvent\",\n    value: function logEvent(eventType, eventData) {\n      var logEntry = _objectSpread({\n        timestamp: new Date().toISOString(),\n        game_time_remaining: this.gameDuration,\n        event_type: eventType\n      }, eventData);\n      this.gameData.push(logEntry);\n      console.log('Logged Event:', logEntry);\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var _this4 = this;\n      // Handle player movement\n      if (this.isMobile && this.joyStick) {\n        // Mobile joystick controls\n        var force = this.joyStick.force;\n        if (force > 0) {\n          var speed = 160;\n          this.player.setVelocity(this.joyStick.forceX * speed, this.joyStick.forceY * speed);\n\n          // Simple animation based on direction\n          if (Math.abs(this.joyStick.forceX) > Math.abs(this.joyStick.forceY)) {\n            // Moving horizontally\n            this.player.setFlipX(this.joyStick.forceX < 0);\n          }\n        } else {\n          this.player.setVelocity(0);\n        }\n      } else if (this.cursors) {\n        // Desktop keyboard controls\n        this.player.setVelocity(0);\n        if (this.cursors.left.isDown) {\n          this.player.setVelocityX(-160);\n          this.player.setFlipX(true);\n        } else if (this.cursors.right.isDown) {\n          this.player.setVelocityX(160);\n          this.player.setFlipX(false);\n        }\n        if (this.cursors.up.isDown) {\n          this.player.setVelocityY(-160);\n        } else if (this.cursors.down.isDown) {\n          this.player.setVelocityY(160);\n        }\n      }\n\n      // Hide interaction indicator if player moves away from NPCs\n      if (this.interactionIndicator) {\n        var nearNPC = false;\n        this.interactionZones.getChildren().forEach(function (zone) {\n          var distance = Phaser.Math.Distance.Between(_this4.player.x, _this4.player.y, zone.x, zone.y);\n          if (distance < 100) {\n            nearNPC = true;\n          }\n        });\n        if (!nearNPC) {\n          this.interactionIndicator.setVisible(false);\n        }\n      }\n    }\n  }]);\n}(Phaser.Scene);\n;// ./src/scenes/EndScene.js\nfunction EndScene_typeof(o) { \"@babel/helpers - typeof\"; return EndScene_typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, EndScene_typeof(o); }\nfunction _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = \"function\" == typeof Symbol ? Symbol : {}, n = r.iterator || \"@@iterator\", o = r.toStringTag || \"@@toStringTag\"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, \"_invoke\", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError(\"Generator is already running\"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = \"next\"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError(\"iterator result is not an object\"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i[\"return\"]) && t.call(i), c < 2 && (u = TypeError(\"The iterator does not provide a '\" + o + \"' method\"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, \"GeneratorFunction\")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, \"constructor\", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = \"GeneratorFunction\", _regeneratorDefine2(GeneratorFunctionPrototype, o, \"GeneratorFunction\"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, \"Generator\"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, \"toString\", function () { return \"[object Generator]\"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }\nfunction _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, \"\", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { if (r) i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n;else { var o = function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); }; o(\"next\", 0), o(\"throw\", 1), o(\"return\", 2); } }, _regeneratorDefine2(e, r, n, t); }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\nfunction EndScene_classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction EndScene_defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, EndScene_toPropertyKey(o.key), o); } }\nfunction EndScene_createClass(e, r, t) { return r && EndScene_defineProperties(e.prototype, r), t && EndScene_defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction EndScene_toPropertyKey(t) { var i = EndScene_toPrimitive(t, \"string\"); return \"symbol\" == EndScene_typeof(i) ? i : i + \"\"; }\nfunction EndScene_toPrimitive(t, r) { if (\"object\" != EndScene_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != EndScene_typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction EndScene_callSuper(t, o, e) { return o = EndScene_getPrototypeOf(o), EndScene_possibleConstructorReturn(t, EndScene_isNativeReflectConstruct() ? Reflect.construct(o, e || [], EndScene_getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction EndScene_possibleConstructorReturn(t, e) { if (e && (\"object\" == EndScene_typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return EndScene_assertThisInitialized(t); }\nfunction EndScene_assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction EndScene_isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (EndScene_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction EndScene_getPrototypeOf(t) { return EndScene_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, EndScene_getPrototypeOf(t); }\nfunction EndScene_inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && EndScene_setPrototypeOf(t, e); }\nfunction EndScene_setPrototypeOf(t, e) { return EndScene_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, EndScene_setPrototypeOf(t, e); }\nvar EndScene = /*#__PURE__*/function (_Phaser$Scene) {\n  function EndScene() {\n    EndScene_classCallCheck(this, EndScene);\n    return EndScene_callSuper(this, EndScene, [{\n      key: 'EndScene'\n    }]);\n  }\n  EndScene_inherits(EndScene, _Phaser$Scene);\n  return EndScene_createClass(EndScene, [{\n    key: \"init\",\n    value: function init(data) {\n      // Receive data from the GameScene\n      this.score = data.score || 0;\n      this.gameData = data.gameData || [];\n    }\n  }, {\n    key: \"preload\",\n    value: function preload() {\n      // Load any assets needed for the end scene\n      this.load.image('button_background', 'https://labs.phaser.io/assets/sprites/button-bg.png');\n    }\n  }, {\n    key: \"create\",\n    value: function create() {\n      // Background\n      this.add.rectangle(400, 300, 800, 600, 0x000000);\n\n      // Game Over text\n      this.add.text(400, 100, 'Game Over', {\n        fontSize: '64px',\n        color: '#ffffff'\n      }).setOrigin(0.5);\n\n      // Display final score\n      this.add.text(400, 200, \"Your Score: \".concat(this.score), {\n        fontSize: '32px',\n        color: '#ffffff'\n      }).setOrigin(0.5);\n\n      // Create input field for player initials\n      this.createInitialsInput();\n\n      // Create submit button\n      this.createSubmitButton();\n\n      // Create restart button\n      this.createRestartButton();\n    }\n  }, {\n    key: \"createInitialsInput\",\n    value: function createInitialsInput() {\n      // Label for initials\n      this.add.text(400, 280, 'Enter your initials:', {\n        fontSize: '24px',\n        color: '#ffffff'\n      }).setOrigin(0.5);\n\n      // Create a visual input field\n      var inputField = this.add.rectangle(400, 320, 200, 40, 0x333333);\n\n      // Text that will display the initials\n      this.initialsText = this.add.text(400, 320, '', {\n        fontSize: '24px',\n        color: '#ffffff'\n      }).setOrigin(0.5);\n\n      // Enable keyboard input\n      this.input.keyboard.on('keydown', this.handleKeyInput, this);\n\n      // Store the current initials\n      this.initials = '';\n    }\n  }, {\n    key: \"handleKeyInput\",\n    value: function handleKeyInput(event) {\n      // Only allow letters and limit to 3 characters\n      if (/^[a-zA-Z]$/.test(event.key) && this.initials.length < 3) {\n        this.initials += event.key.toUpperCase();\n        this.initialsText.setText(this.initials);\n      }\n      // Allow backspace to delete characters\n      else if (event.key === 'Backspace' && this.initials.length > 0) {\n        this.initials = this.initials.slice(0, -1);\n        this.initialsText.setText(this.initials);\n      }\n    }\n  }, {\n    key: \"createSubmitButton\",\n    value: function createSubmitButton() {\n      var _this = this;\n      // Create submit button\n      var submitButton = this.add.image(400, 400, 'button_background').setInteractive().setScale(2, 1);\n      this.add.text(400, 400, 'Submit Score', {\n        fontSize: '24px',\n        color: '#000000'\n      }).setOrigin(0.5);\n      submitButton.on('pointerdown', function () {\n        if (_this.initials.length > 0) {\n          _this.submitScore();\n        } else {\n          // Show error message if no initials entered\n          _this.showMessage('Please enter your initials!', '#ff0000');\n        }\n      });\n    }\n  }, {\n    key: \"createRestartButton\",\n    value: function createRestartButton() {\n      var _this2 = this;\n      // Create restart button\n      var restartButton = this.add.image(400, 480, 'button_background').setInteractive().setScale(2, 1);\n      this.add.text(400, 480, 'Play Again', {\n        fontSize: '24px',\n        color: '#000000'\n      }).setOrigin(0.5);\n      restartButton.on('pointerdown', function () {\n        // Go back to the title screen\n        _this2.scene.start('TitleScene');\n      });\n    }\n  }, {\n    key: \"submitScore\",\n    value: function submitScore() {\n      var _this3 = this;\n      // Prepare the data to be sent\n      var gameData = {\n        initials: this.initials,\n        score: this.score,\n        timestamp: new Date().toISOString(),\n        gameplay_data: this.gameData\n      };\n\n      // Convert to JSON string\n      var jsonData = JSON.stringify(gameData);\n\n      // Generate a unique filename based on timestamp and initials\n      var filename = \"\".concat(Date.now(), \"_\").concat(this.initials, \".json\");\n\n      // Send data to server\n      fetch('save_data.php', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        body: \"filename=\".concat(encodeURIComponent(filename), \"&filedata=\").concat(encodeURIComponent(jsonData))\n      }).then(function (response) {\n        if (response.ok) {\n          return response.json();\n        }\n        throw new Error('Network response was not ok');\n      }).then(function (data) {\n        _this3.showMessage('Score submitted successfully!', '#00ff00');\n\n        // Also submit to highscore list\n        return fetch('save_highscore.php', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded'\n          },\n          body: \"initials=\".concat(encodeURIComponent(_this3.initials), \"&score=\").concat(encodeURIComponent(_this3.score))\n        });\n      })[\"catch\"](function (error) {\n        console.error('Error:', error);\n        _this3.showMessage('Failed to submit score. Try again.', '#ff0000');\n      });\n    }\n  }, {\n    key: \"showMessage\",\n    value: function showMessage(text, color) {\n      var _this4 = this;\n      // Remove any existing message\n      if (this.message) {\n        this.message.destroy();\n      }\n\n      // Create new message\n      this.message = this.add.text(400, 540, text, {\n        fontSize: '24px',\n        color: color,\n        backgroundColor: '#000000'\n      }).setOrigin(0.5);\n\n      // Auto-remove after 3 seconds\n      this.time.delayedCall(3000, function () {\n        if (_this4.message) {\n          _this4.message.destroy();\n          _this4.message = null;\n        }\n      });\n    }\n  }, {\n    key: \"shareScore\",\n    value: function () {\n      var _shareScore = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {\n        var shareData, _t, _t2;\n        return _regenerator().w(function (_context) {\n          while (1) switch (_context.n) {\n            case 0:\n              shareData = {\n                title: 'Attentional Horizons',\n                text: \"I scored \".concat(this.score, \" in Attentional Horizons! Can you beat my score?\"),\n                url: 'https://azaelmontejo.com/attentional-horizons/'\n              }; // Use the Web Share API if available\n              if (!navigator.share) {\n                _context.n = 5;\n                break;\n              }\n              _context.p = 1;\n              _context.n = 2;\n              return navigator.share(shareData);\n            case 2:\n              console.log('Score shared successfully');\n              _context.n = 4;\n              break;\n            case 3:\n              _context.p = 3;\n              _t = _context.v;\n              console.error('Error sharing:', _t);\n            case 4:\n              _context.n = 8;\n              break;\n            case 5:\n              _context.p = 5;\n              _context.n = 6;\n              return navigator.clipboard.writeText(\"\".concat(shareData.text, \" \").concat(shareData.url));\n            case 6:\n              // Provide user feedback that text was copied\n              this.showMessage('Copied to clipboard!', '#00ff00');\n              _context.n = 8;\n              break;\n            case 7:\n              _context.p = 7;\n              _t2 = _context.v;\n              console.error('Failed to copy to clipboard:', _t2);\n              this.showMessage('Failed to copy to clipboard', '#ff0000');\n            case 8:\n              return _context.a(2);\n          }\n        }, _callee, this, [[5, 7], [1, 3]]);\n      }));\n      function shareScore() {\n        return _shareScore.apply(this, arguments);\n      }\n      return shareScore;\n    }()\n  }]);\n}(Phaser.Scene);\n;// ./src/main.js\nfunction main_typeof(o) { \"@babel/helpers - typeof\"; return main_typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, main_typeof(o); }\nfunction main_defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, main_toPropertyKey(o.key), o); } }\nfunction main_createClass(e, r, t) { return r && main_defineProperties(e.prototype, r), t && main_defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction main_toPropertyKey(t) { var i = main_toPrimitive(t, \"string\"); return \"symbol\" == main_typeof(i) ? i : i + \"\"; }\nfunction main_toPrimitive(t, r) { if (\"object\" != main_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != main_typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction main_classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction main_callSuper(t, o, e) { return o = main_getPrototypeOf(o), main_possibleConstructorReturn(t, main_isNativeReflectConstruct() ? Reflect.construct(o, e || [], main_getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction main_possibleConstructorReturn(t, e) { if (e && (\"object\" == main_typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return main_assertThisInitialized(t); }\nfunction main_assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction main_isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (main_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction main_getPrototypeOf(t) { return main_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, main_getPrototypeOf(t); }\nfunction main_inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && main_setPrototypeOf(t, e); }\nfunction main_setPrototypeOf(t, e) { return main_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, main_setPrototypeOf(t, e); }\n\n\n\n\n// Define the game configuration\nvar config = {\n  type: Phaser.AUTO,\n  width: 800,\n  height: 600,\n  parent: 'game-container',\n  physics: {\n    \"default\": 'arcade',\n    arcade: {\n      gravity: {\n        y: 0\n      },\n      debug: false\n    }\n  },\n  scene: [TitleScene, GameScene, EndScene]\n};\n\n// Create the game instance\nwindow.MyGame = /*#__PURE__*/function (_Phaser$Game) {\n  function Game(config) {\n    main_classCallCheck(this, Game);\n    return main_callSuper(this, Game, [config]);\n  }\n  main_inherits(Game, _Phaser$Game);\n  return main_createClass(Game);\n}(Phaser.Game);\n\n// Start the game when the page loads\nwindow.addEventListener('load', function () {\n  new window.MyGame(config);\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///296\n")}},__webpack_exports__={};__webpack_modules__[296]()})();